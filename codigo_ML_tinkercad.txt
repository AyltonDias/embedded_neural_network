#include "math.h"

#define n_entradas 7
#define n_neuronios 5
#define n_saidas 4
#define n_testes 20


#define saida0 0b11111100
#define saida1 0b00011000
#define saida2 0b01101100
#define saida3 0b00111100
#define saida4 0b10011000
#define saida5 0b10110100
#define saida6 0b11110100
#define saida7 0b00011100
#define saida8 0b11111100
#define saida9 0b10111100

//Dados de teste da rede
const float x_teste[20][n_entradas] ={
  	{2.50198930213149,0.439350927051998,2.48548207218913,4.46270844985632,0.437979299603599,2.97579370472236,2.42779734998041},
    {0.224953481291687,0.0591578948752182,0.602966424751168,0.273830529503537,3.02499171823299,2.70892869288254,3.53893831450574},
    {3.34128041389553,0.602692721115502,0.400020475964477,3.82931560737046,3.5671074849897,3.12630353213998,4.73393711196318},
    {2.17655192482015,2.16399848513121,2.60762397175183,2.49228652561193,3.00951002038675,2.10301006956172,4.51720992431126},
    {0.559720280523962,0.36634434746801,0.724544629977762,0.641010440082402,2.31952070757989,2.23330185414082,3.00043385888996},
    {4.27315781515812,4.53206991247133,0.0315961818645098,0.597319924344235,4.1599374900641,3.3087954121267,0.571502003659656},
    {0.772498513516504,4.64595940234057,2.61938414458311,3.75385664047026,2.83013067531399,4.90494814651418,4.6628364149798},
    {0.525645141056299,0.0865338019091946,0.296863857788462,0.303153270370191,3.99470667997045,2.21548681597094,4.49797197525578},
    {4.13369298478893,0.168581931318442,4.62149171535962,2.33383514455161,0.711017560143584,2.519789691746,4.68489968094694},
    {4.45758528479096,0.435873623714479,0.510769428565862,4.62180875413646,3.54083387504983,2.4914252650134,3.28326694687096},
    {0.111697967631273,0.18664601652709,0.457987755263476,0.155734881737423,2.68095654299123,4.42663727065873,0.674601673214305},
    {2.31824541440919,2.15815817197502,3.18040876552552,4.57606458247427,4.31062251778083,4.06848355882073,4.08636788069978},
    {3.14309995813978,2.08915376025929,0.105853631699198,2.96214359549629,2.00649684516174,0.633501822970257,2.14723265908287},
    {3.63737146903211,0.66990344768261,3.51424682224282,2.88455508374377,0.764528037627004,4.9859744200611,4.09216941499024},
    {4.57552818944141,3.59411144932426,2.11621741716333,2.46186997441944,2.99463198936035,0.732412402698918,3.7944437160024},
    {0.619822445397708,3.65536186947519,2.6423169631029,4.29201571651065,3.30768813412371,4.39854630031618,3.67164091499147},
    {0.445872996791149,0.797314425683529,0.372553984435192,0.20824261678695,3.76249460551332,4.83838573472458,3.60834184721916},
    {4.78498132650623,3.76924764436192,0.0749942498949683,0.0826228804037309,4.31682937596116,2.27120655617457,0.18689067065253},
    {0.158693338328967,0.621028093680959,0.712279702805498,0.533141114558088,3.8967233446694,2.49544114357526,0.0534782171488906},
    {0.146862974491457,2.93679211360063,2.47835776385553,2.21417662521272,3.17103345797033,4.46866132131242,4.50674030669954}
};

// pesos das entradas
const float w1[n_entradas][n_neuronios] = {
  {-0.06981869,  0.08018015, -0.48653334, -0.09449212, -0.35925102},
  { 0.2894952 , -2.2227166 , -1.0201762 , -0.28232157, -0.6397346 },
  {-0.23147927, -0.12639557, -1.2713825 , -1.8966316 ,  0.17269853},
  {-0.6216938 ,  0.2555481 , -0.866405  ,  0.2909935 , -0.41007325},
  {-0.04635529,  0.05584353, -0.7942329 ,  0.18883148,  0.54330695},
  {-0.7343522 , -0.04461832, -0.6590833 ,  0.06322527, -0.7711979 },
  { 0.37837237,  0.24847132, -1.236536  ,  0.3398279 , -0.6836407 }
};

//bias das entradas
const float bias_1[n_neuronios] = {2.0738175 ,  1.8465545 , -0.68844   ,  1.2482992 ,  0.72373176};

//pesos das saidas
const float w2[n_neuronios][n_saidas] = {
  {-2.942348  ,  3.7415226 ,  1.9069719 ,  2.2326598 },
  {-0.913359  , -2.4802303 ,  3.084548  ,  3.7031612 },
  { 1.0456389 ,  0.15046379,  0.4131965 ,  0.4314405 },
  { 0.69387627,  2.2167578 , -2.287698  ,  6.757952  },
  { 0.943629  , -0.2008209 , -0.5795503 ,  0.575481  }
};

//bais das saidas
const float bias_2[n_saidas] = {-1.228407  ,  0.36783695,  0.32196864, -0.84659463};

//Função de ativação sigmoid
float sigmoid(float x){
  double y = 1/(1+exp(-x));
  return y;
}

//Função para 1 neuronio
float neuron(float peso[], float input[], float Bias){
  float z,y = 0.0;
  
  for(int i=0; i < n_entradas; i++)
  {
     y += peso[i]*input[i];
  }
  y += Bias;
  z = sigmoid(y);
  return z;
}


// Predição de numeros
int predict(float input[]){
 
  float n1[5] = {0,0,0,0,0};
  float n2[4] = {0,0,0,0};

  //Entrada * peso w1
  for(int i=0;i<n_entradas;i++){
    for(int j=0;j<n_neuronios;j++){
      if(w1[i][j] != 0. ){
        n1[j] += input[i]*w1[i][j];
      }
    }
  }

  //n1 + bias_1
  for(int i=0;i<n_neuronios;i++){
    if(bias_1[i]!=0.)
      n1[i]+=bias_1[i];
  }

  //tanh
  for(int i=0;i<n_neuronios;i++){
    n1[i] = tanh(n1[i]);
  }

  //n1 * peso w2
  for(int i=0;i<n_neuronios;i++){
    for(int j=0;j<4;j++){
      if(w2[i][j] != 0. ){
        n2[j] += n1[i]*w2[i][j];
      }
    }
  }

  //n2 + bias_2
  for(int i=0;i<n_saidas;i++){
    if(bias_1[i]!=0.)
      n2[i]+=bias_2[i];
  }
  
  //sigmoid
  float p1 = sigmoid(n2[0]);
  float p2 = sigmoid(n2[1]);
  float p3 = sigmoid(n2[2]);
  float p4 = sigmoid(n2[3]);
  
  //arredonda os resultados para ficar 0 ou 1 
  int dig1 = roundf(p1);
  int dig2 = roundf(p2);
  int dig3 = roundf(p3);
  int dig4 = roundf(p4);
  
  Serial.print("Saidas: ");
  Serial.print(dig1);
  Serial.print(" ");
  Serial.print(dig2);
  Serial.print(" ");
  Serial.print(dig3);
  Serial.print(" ");
  Serial.println(dig4);
  
  return (8*dig1 + 4*dig2 + 2*dig3 + 1*dig4);        
}

int main(){
    
  DDRD |= 0b11111111;
  DDRB |= 0b00000001;
  
  PORTD = 0b00000000; 
  PORTB = 0b00000000; 
  
  Serial.begin(9600);
  float input[n_entradas];
  int n =0;
  
  while(1){
    
    if(n>=n_testes){
    	n = 0;
    }
    
    for(int i=0;i<n_entradas;i++){
    	input[i] = x_teste[n][i];
    	}
    
    int num = predict(input);
    
    Serial.print("numero: ");
    Serial.println(num);
    
    if(num == 0){
      PORTD |= saida0;
      PORTB |= 0b00000000;
      Serial.print("Caso 0: aqui");
      Serial.print("\n");
      
    }else if(num == 1){
      PORTD |= saida1;
      PORTB |= 0b00000000;
      Serial.print("Caso 1: aqui");
      Serial.print("\n");
      
    }else if(num == 2){
      PORTD |= saida2;
      PORTB |= 0b00000001;
      Serial.print("Caso 2: aqui");
      Serial.print("\n");
      
    }else if(num == 3){
      PORTD |= saida3;
      PORTB |= 0b00000001;
      Serial.print("Caso 3: aqui");
      Serial.print("\n");
      
    }else if(num == 4){
	  PORTD |= saida4;
	  PORTB |= 0b00000001;
      Serial.print("Caso 4: aqui");
      Serial.print("\n");
      
    }else if(num == 5){
      PORTD |= saida5;
	  PORTB |= 0b00000001;
      Serial.print("Caso 5: aqui");
      Serial.print("\n");
      
    }else if(num == 6){
      PORTD |= saida6;
	  PORTB |= 0b00000001;
      Serial.print("Caso 6: aqui");
      Serial.print("\n");
      
    }else if(num == 7){
      PORTD |= saida7;
      PORTB |= 0b00000000;
      Serial.print("Caso 7: aqui");
      Serial.print("\n");
      
    }else if(num == 8){
      PORTD |= saida8;
	  PORTB |= 0b00000001;
      Serial.print("Caso 8: aqui");
      Serial.print("\n");
      
    }else if(num == 9){
      PORTD |= saida9;
      PORTB |= 0b000000001;
      Serial.print("Caso 9: aqui");
      Serial.print("\n");
      
    }
    
  	_delay_ms(1000);
    PORTD = 0x00; //apaga todas as portas de PD
    PORTB = 0x00; //apaga todas as portas de PB
    n+=1;
  	_delay_ms(1000);
  }
}